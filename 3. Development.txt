# 3. DEVELOPMENT
----------------

* Determining velocity
----------------------

* Velocity Defined
------------------
Velocity is a measurement metric that's used to determine how much work an agile team can do over a period of time. The period of time is usually a sprint, so you might also hear this
defined as sprint velocity.


* Velocity Measurement Considerations
-------------------------------------
. Dependent on how your team decides to weight user stories and tasks

. Keep the scoring criteria consistent: points, features, etc


* Creating a baseline
---------------------
. Set the baseline at 30% of overall sprint duration

. Whether you hit the mark or not, it will show what needs to be improved.


* What Velocity Tells Us
------------------------
. Once a baseline is established, each following sprint gives you and your team more data points

. Increase sprint goals if you are hitting 30% velocity too easily, or decrease if underdelivering

. After five or six sprints, you'll have a stable velocity to plan with


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Agile programming techniques
------------------------------

* Common Sense Reasoning
------------------------
One of the most important aspects of good agile development is including refactoring into your development time as the status quo - rather than as something you do when there's free time
in the schedule, or worse yet, as an afterthought.


* Considerations
----------------
. Produces more readable code

. Better architecture and structure naturally evolve

. Reveals bugs and vulnerabilities early


The idea is small, continuous changes that improve your code base over huge one-time retrofits.

This way, you have time to test your refactored improvements right alongside your development.


* Avoiding Risk
---------------
If you leave refactoring to the end of the project, or after big chunks of code have been written, you run the risk of sending fragmenting ripples through your working code.  This is just 
another reason why refactoring fits so well within an agile workflow.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Refactor, and then refactor more
----------------------------------

		WHAT PROGRAMMING METHODOLOGIES GO WELL WITH AGILE DEVELOPMENT
		-------------------------------------------------------------
		. Pair Programming.

		. Test-Driven Development (TDD).


* Benefits of Pair Programming
------------------------------
. Fewer errors and better solutions in code

. Team members all work with each other one-on-one

. Shared ownership of all written code weets out the ego in the equation


* Benefits of TDD
-----------------
. Only absolutely necessary code makes the cut in the production code base

. It naturally enforces good object-oriented programming practices and clean code

. Functional test suite that grows with the production code


* Final Note
------------
Using these and other development techniques won't determine whether you're running an agile project.

There are developers who have expressed this view, and it's simply not the case.  These are available tools, nothing more.

If you want to run your agile project using some other way, or by using other techniques, go right ahead. You'll still be running an agile project.













































